# Generated by Django 5.2.6 on 2025-10-26 18:41

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("FutureTrading", "0005_remove_tradingsignal_instrument_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="MarketOpenSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_number",
                    models.IntegerField(help_text="Trade counter/sequence number"),
                ),
                ("year", models.IntegerField()),
                ("month", models.IntegerField()),
                ("date", models.IntegerField(help_text="Day of month")),
                (
                    "day",
                    models.CharField(
                        help_text="Day of week (Mon, Tue, etc.)", max_length=10
                    ),
                ),
                (
                    "captured_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Exact timestamp of capture",
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        help_text="Market region (Japan, China, Europe, USA, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "ym_open",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "ym_close",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "ym_ask",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Ask price at capture",
                        max_digits=10,
                    ),
                ),
                (
                    "ym_bid",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Bid price at capture",
                        max_digits=10,
                    ),
                ),
                (
                    "ym_last",
                    models.DecimalField(
                        decimal_places=2, help_text="Last traded price", max_digits=10
                    ),
                ),
                (
                    "ym_entry_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Actual entry (Ask if buying, Bid if selling)",
                        max_digits=10,
                    ),
                ),
                (
                    "ym_high_dynamic",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Entry + 20 points ($100 profit target)",
                        max_digits=10,
                    ),
                ),
                (
                    "ym_low_dynamic",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Entry - 20 points ($100 stop loss)",
                        max_digits=10,
                    ),
                ),
                (
                    "total_signal",
                    models.CharField(
                        choices=[
                            ("BUY", "Buy"),
                            ("STRONG_BUY", "Strong Buy"),
                            ("SELL", "Sell"),
                            ("STRONG_SELL", "Strong Sell"),
                            ("HOLD", "Hold"),
                        ],
                        help_text="Composite signal from TOTAL weighted average",
                        max_length=20,
                    ),
                ),
                (
                    "strong_sell_flag",
                    models.BooleanField(
                        default=False, help_text="Flag for strong sell signal"
                    ),
                ),
                (
                    "study_fw",
                    models.CharField(
                        blank=True,
                        help_text="Study/Framework identifier",
                        max_length=50,
                    ),
                ),
                (
                    "fw_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Weighted average for composite calculation",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "didnt_work",
                    models.BooleanField(default=False, help_text="Trade outcome flag"),
                ),
                (
                    "fw_nwdw",
                    models.CharField(
                        choices=[
                            ("WORKED", "Worked"),
                            ("DIDNT_WORK", "Didn't Work"),
                            ("NEUTRAL", "Neutral"),
                            ("PENDING", "Pending"),
                        ],
                        default="PENDING",
                        help_text="Framework status",
                        max_length=20,
                    ),
                ),
                (
                    "fw_exit_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Exit price value",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "fw_exit_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Exit percentage",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "fw_stopped_out_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Stopped out price value",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "fw_stopped_out_nwdw",
                    models.CharField(
                        blank=True, help_text="Stopped out status", max_length=20
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Market Open Session",
                "verbose_name_plural": "Market Open Sessions",
                "ordering": ["-captured_at"],
                "unique_together": {("country", "year", "month", "date")},
            },
        ),
        migrations.CreateModel(
            name="FutureSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "symbol",
                    models.CharField(
                        choices=[
                            ("YM", "Dow Jones (YM)"),
                            ("ES", "S&P 500 (ES)"),
                            ("NQ", "NASDAQ (NQ)"),
                            ("RTY", "Russell 2000 (RTY)"),
                            ("CL", "Crude Oil (CL)"),
                            ("SI", "Silver (SI)"),
                            ("HG", "Copper (HG)"),
                            ("GC", "Gold (GC)"),
                            ("VX", "Volatility (VX)"),
                            ("DX", "Dollar Index (DX)"),
                            ("ZB", "Bonds (ZB)"),
                            ("TOTAL", "TOTAL Composite"),
                        ],
                        help_text="Future symbol",
                        max_length=10,
                    ),
                ),
                (
                    "last_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Last traded price",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "change",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price change from previous close",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "change_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Percentage change",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "bid",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Current bid price",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "bid_size",
                    models.IntegerField(blank=True, help_text="Bid size", null=True),
                ),
                (
                    "ask",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Current ask price",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "ask_size",
                    models.IntegerField(blank=True, help_text="Ask size", null=True),
                ),
                (
                    "volume",
                    models.BigIntegerField(
                        blank=True, help_text="Trading volume", null=True
                    ),
                ),
                (
                    "vwap",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Volume Weighted Average Price",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "spread",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Bid-Ask spread",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "close",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Previous close price",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "open",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Open price",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "open_vs_prev_number",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Open vs Prev (Number)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "open_vs_prev_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Open vs Prev (%)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "day_24h_low",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="24 hour low",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "day_24h_high",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="24 hour high",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "range_high_low",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Range (24h High - 24h Low)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "range_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Range as % of previous close",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "week_52_low",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="52-week low",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "week_52_high",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="52-week high",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "week_52_range_high_low",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="52-week range (High - Low)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "week_52_range_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="52-week range as % of current price",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "entry_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Ask if buying, Bid if selling",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "high_dynamic",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Entry + 20 points",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "low_dynamic",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Entry - 20 points",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "weighted_average",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="TOTAL weighted average (e.g., -0.109)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "signal",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BUY", "Buy"),
                            ("STRONG_BUY", "Strong Buy"),
                            ("SELL", "Sell"),
                            ("STRONG_SELL", "Strong Sell"),
                            ("HOLD", "Hold"),
                        ],
                        help_text="TOTAL signal",
                        max_length=20,
                    ),
                ),
                (
                    "weight",
                    models.IntegerField(
                        blank=True, help_text="TOTAL weight (e.g., -3)", null=True
                    ),
                ),
                (
                    "sum_weighted",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Sum weighted (e.g., 13.02)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "instrument_count",
                    models.IntegerField(
                        blank=True,
                        default=11,
                        help_text="Count of instruments (typically 11)",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True, help_text="Status (e.g., LIVE TOTAL)", max_length=20
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="futures",
                        to="FutureTrading.marketopensession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Future Snapshot",
                "verbose_name_plural": "Future Snapshots",
                "ordering": ["session", "symbol"],
                "unique_together": {("session", "symbol")},
            },
        ),
    ]
